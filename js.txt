Hoisting Topic:
Hoisting is something when the declared variable comes on top irrespective of its place in the code.
Classes can't be hoisted but normal function can be hoisted

hoistingdone(){
    console.log(i);
    var i =10;
}
hoistingdone();

is similar to the below code,

hoistingdone(){
    var i =10;
    console.log(i);
}
hoistingdone();
==========================================================================

Function expression:
if the function you made is annonyms and don't gve any name, then the name it pick is the name of var you are assigning it.

for eg:
var function2 = function (n){
    var ans=1;
    for(var i =1; i<5; i++){
        ans = ans*1;
    }
    return ans;
};

console.log(factorial2(n));

Here the output on console will be:

f factorial2(n){
    var ans=1;
    for(var i =1; i<5; i++){
        ans = ans*1;
    }
    return ans;
}
}

==================================================================

iteration over arrays:

suppose there is an array named: arr = [2,3,4,5,6,7];
and we are creating a function called print,
function print(i){
    console.log(i)
}

Now suppose you want to print that one by one... there are many steps but here I will be talking about mainly 2 steps;
1st one:
for(var i=0;i<arr.length;i++){
    print(arr[i])
}

2nd one: where we can get the result without complex 1st step is, foreach method.
arr.forEach(print);

=======================================================================
DOM:

Document object Model

it represents the logical structure of the page.

And JS uses DOM to manipulate the web page.

=============================================================================================

How to travel over keys using 3 different methods?

for eg:

var Student = {
    "name":"Shivam",
    roll:11,
    marks:90
}


1st method:
var keys = Object.keys(Student);

2nd method:
var keys = Object.getOwnPropertyNames(Student);

3rd method:

for(var prop in Student){
    console.log(prop);
}

====================================================================


Pass by value and pass by reference:

obj and arrays are pass by reference where as any primitive data type is pass by value.

=====================================================================

Spread Operator:

var Student = {
    "name":"Shivam",
    roll:11,
    marks:90
}

var Child = Student;

in this case child is also refering to the var Student, and any change in either of them create make change in both.
But by using spread operator you can create a new memory place for Child.

Instead of this,
var Child = Student;
Just write,
var Child = {...Student};

Or other way is there by assigning,

var Stud = Object.assign({}, Student);

Now any change made in Child will not get reflected on Student variable.


In array, you can also use map method to create a var with different memory place,

arr = [2,3,4];
by using map,
var arr2 = arr.map(el => el);




========================================================================

Strict Mode:

The strict mode was introduced in ECMAScript 5. It is a way to add a strict checking in
JavaScript that would make fewer mistakes.
JavaScript allows strict mode code and non-strict mode code to coexist. So you can add
your new JavaScript code in strict mode in old JavaScript files.
Strict mode introduces several restrictions to the JavaScript code like eliminates some silent
errors by throwing errors.
You can introduce a strict mode in your JavaScript code by writing this simple statement -
'use strict'; OR "use strict";
You can apply strict mode to an entire script or to individual function -
● Write this at the top of the whole script to apply strict mode globally.
● Or write it inside functions to apply it to a particular function only.
Eg., you have a function as -
function abc(a, a) {
    console.log(a + a);
}
abc(10, 20);


The above code will print 40 on the console, whereas if you use strict mode as -

function abc(a, a) {
'use strict';
console.log(a + a);
}
abc(10, 20);
This code will produce an error - 'SyntaxError: duplicate formal argument a'.

===============================================================================

Difference between replace and assign:

The replace() removes the current document from the browsing history before 
loading the new document.The difference between assign method and replace(), 
is that replace() removes the URL of the current document from the document history,
 meaning that it is not possible to use the “back” button to navigate back to the
original document.

For example, in console type window.location.replace("https://www.wikipedia.org");

==================================================================================


function and function called:

suppose there is a function called test(),
then whenever test is written that means it is that function but test()-this means function called. 


=====================================================================================

IIFE - Immediate invoked function expression
eg:

function print(){
    var name = "Shivam";
    console.log(name);
}

print();

In IIFE, this can be written as:

(function(){
    var name = "Shivam";
    console.log(name);
})();

that's it

Also we can use let instead of IIFE, eg:
{
    let name = "Shivam";
    console.log(name);
}

=====================================================================================

Closure:

А closure is а feаture in JаvаSсriрt where аn inner funсtiоn hаs ассess tо the оuter
(enсlоsing) funсtiоn’s vаriаbles—а sсорe сhаin.
The closure has three sсорe chains:

it has ассess tо its оwn sсорe—vаriаbles defined between its сurly brасkets
it hаs ассess tо the оuter funсtiоn’s vаriаbles
it hаs ассess tо the glоbаl vаriаbles

А closure is created when аn inner funсtiоn is made accessible frоm outside of the
funсtiоn thаt сreаted it. This tyрiсаlly оссurs when an outer function returns аn inner
funсtiоn. When this hаррens, the inner function mаintаins а referenсe tо the
environment in whiсh it wаs сreаted. This meаns thаt it remembers аll оf the
vаriаbles (аnd their vаlues) thаt were in sсорe аt the time. The following example
shows how closure is created аnd used.


================================================================================

In JavaScript, what is a prototype?

By definition, a prototype allows two objects to share something common. In other words, these prototypes give objects their properties.

A central repository for all secrets...


====================================================================================

Event loop:

Event loop basicalyy consists of (call stack + task queue). 
callback function waits in task queue for empty stack position at top, the moment stack is empty dequeue from tq happen. And it comes on top of stack.

The Promise.race() will return the first resolved promise.

if promise and timeout both are there then promise task goes to micro-task queue and when stack is empty then micro-task will deque first, even if 1000 tasks are there in micro-task then also micro-task will get executed first.

"""
function getData(){
    return Promise.resolve('some data');
}
async function abc(){
    const data = await getData(); //await will make suspend the function, in bg will wait getData() to get completed. Till then JS will move to sync code.
    console.log(data);
}
abc();
cosole.log('1');
"""

Output will be:
1
some data
========================================================================================