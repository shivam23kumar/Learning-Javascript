Hoisting Topic:
Hoisting is something when the declared variable comes on top irrespective of its place in the code.


hoistingdone(){
    console.log(i);
    var i =10;
}
hoistingdone();

is similar to the below code,

hoistingdone(){
    var i =10;
    console.log(i);
}
hoistingdone();
==========================================================================

Function expression:
if the function you made is annonyms and don't gve any name, then the name it pick is the name of var you are assigning it.

for eg:
var function2 = function (n){
    var ans=1;
    for(var i =1; i<5; i++){
        ans = ans*1;
    }
    return ans;
};

console.log(factorial2(n));

Here the output on console will be:

f factorial2(n){
    var ans=1;
    for(var i =1; i<5; i++){
        ans = ans*1;
    }
    return ans;
}
}

==================================================================

iteration over arrays:

suppose there is an array named: arr = [2,3,4,5,6,7];
and we are creating a function called print,
function print(i){
    console.log(i)
}

Now suppose you want to print that one by one... there are many steps but here I will be talking about mainly 2 steps;
1st one:
for(var i=0;i<arr.length;i++){
    print(arr[i])
}

2nd one: where we can get the result without complex 1st step is, foreach method.
arr.forEach(print);

=======================================================================

How to travel over keys using 3 different methods?

for eg:

var Student = {
    "name":"Shivam",
    roll:11,
    marks:90
}


1st method:
var keys = Object.keys(Student);

2nd method:
var keys = Object.getOwnPropertyNames(Student);

3rd method:

for(var prop in Student){
    console.log(prop);
}

====================================================================


Pass by value and pass by reference:

obj and arrays are pass by reference where as any primitive data type is pass by value.

=====================================================================

Spread Operator:

var Student = {
    "name":"Shivam",
    roll:11,
    marks:90
}

var Child = Student;

in this case child is also refering to the var Student, and any change in either of them create make change in both.
But by using spread operator you can create a new memory place for Child.

Instead of this,
var Child = Student;
Just write,
var Child = {...Student};

Or other way is there by assigning,

var Stud = Object.assign({}, Student);

Now any change made in Child will not get reflected on Student variable.


In array, you can also use map method to create a var with different memory place,

arr = [2,3,4];
by using map,
var arr2 = arr.map(el => el);




========================================================================

Strict Mode:

The strict mode was introduced in ECMAScript 5. It is a way to add a strict checking in
JavaScript that would make fewer mistakes.
JavaScript allows strict mode code and non-strict mode code to coexist. So you can add
your new JavaScript code in strict mode in old JavaScript files.
Strict mode introduces several restrictions to the JavaScript code like eliminates some silent
errors by throwing errors.
You can introduce a strict mode in your JavaScript code by writing this simple statement -
'use strict'; OR "use strict";
You can apply strict mode to an entire script or to individual function -
● Write this at the top of the whole script to apply strict mode globally.
● Or write it inside functions to apply it to a particular function only.
Eg., you have a function as -
function abc(a, a) {
    console.log(a + a);
}
abc(10, 20);


The above code will print 40 on the console, whereas if you use strict mode as -

function abc(a, a) {
'use strict';
console.log(a + a);
}
abc(10, 20);
This code will produce an error - 'SyntaxError: duplicate formal argument a'.

===============================================================================